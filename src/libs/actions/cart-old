"use server"

import { sdk } from "libs/sdk"
import medusaError from "@libs/util/medusa-error"
import { revalidateTag } from "next/cache"
import { getAuthHeaders, getCacheOptions, getCacheTag, getCartId, setCartId, setCountryCode } from "./cookies"
import { getRegion } from "./region"
import type { StoreUpdateCart } from "@medusajs/types"


export async function updateRegion(countryCode: string) {
    const cartId = await getCartId()
    const region = await getRegion(countryCode)

    if (!region) {
        throw new Error(`Region not found for country code: ${countryCode}`)
    }

    if (cartId) {
        await updateCart({ region_id: region.id })
        const cartCacheTag = await getCacheTag("carts")
        revalidateTag(cartCacheTag)
    }
    setCountryCode(countryCode)
    const regionCacheTag = await getCacheTag("regions")
    revalidateTag(regionCacheTag)

    const productsCacheTag = await getCacheTag("products")
    revalidateTag(productsCacheTag)
}

export async function updateCart(data: StoreUpdateCart) {
    const cartId = await getCartId()

    if (!cartId) {
        throw new Error("No existing cart found, please create one before updating")
    }

    const headers = {
        ...(await getAuthHeaders()),
    }

    return sdk.store.cart
        .update(cartId, data, {}, headers)
        .then(async ({ cart }) => {
            const cartCacheTag = await getCacheTag("carts")
            revalidateTag(cartCacheTag)
            return cart
        })
        .catch(medusaError)
}

export async function retrieveCart(cartId?: string) {
    cartId = cartId || (await getCartId())

    if (!cartId) return null

    const headers = { ...(await getAuthHeaders()) }

    const cache = await getCacheOptions("carts")

    return sdk.store.cart.retrieve(cartId, {
        fields: "*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name"
    }, {
        ...headers,
        next: cache ? { tags: cache.tags } : null,
        cache: "force-cache",
    }).then(({ cart }) => cart).catch(() => null)
}

export async function getOrSetCart(countryCode: string) {
    const region = await getRegion(countryCode)

    if (!region) throw new Error(`Region not found for country code: ${countryCode}`)

    let cart = await retrieveCart()

    const headers = {
        ...(await getAuthHeaders()),
    }

    if (!cart) {
        const cartResp = await sdk.store.cart.create({ region_id: region.id }, {}, headers)
        cart = cartResp.cart

        await setCartId(cart.id)

        const cartCacheTag = await getCacheTag("carts")
        revalidateTag(cartCacheTag)
    }

    if (cart && cart?.region_id !== region.id) {
        await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)
        const cartCacheTag = await getCacheTag("carts")
        revalidateTag(cartCacheTag)
    }

    return cart
}

export async function addToCart({ variantId, quantity, countryCode }: AddToCartProps) {
    if (!variantId) throw new Error("Missing variant ID when adding to cart")

    const cart = await getOrSetCart(countryCode)

    if (!cart) {
        throw new Error("Error retrieving or creating cart")
    }

    const headers = {
        ...(await getAuthHeaders()),
    }

    await sdk.store.cart.createLineItem(cart.id, {
        variant_id: variantId,
        quantity,
    }, {},
        headers
    ).then(async () => {
        const cartCacheTag = await getCacheTag("carts")
        revalidateTag(cartCacheTag)
    }).catch(medusaError)
}

export async function deleteLineItem(lineId: string) {
    if (!lineId) throw new Error("Missing lineItem ID when deleting line item")

    const cartId = await getCartId()

    if (!cartId) throw new Error("Missing cart ID when deleting line item")

    const headers = {
        ...(await getAuthHeaders()),
    }

    await sdk.store.cart.deleteLineItem(cartId, lineId, headers).then(async () => {
        const cartCacheTag = await getCacheTag("carts")
        revalidateTag(cartCacheTag)
    }).catch(medusaError)
}

export async function fetchCartItemCount() {
    const cart = await retrieveCart()
    return cart?.items?.reduce((total, item) => total + item.quantity, 0) || 0;
}

type AddToCartProps = {
    variantId: string
    quantity: number
    countryCode: string
}